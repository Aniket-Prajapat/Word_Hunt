{"version":3,"sources":["Data/languages.ts","Components/Dict.tsx","App.tsx","index.tsx"],"names":["languages","label","value","useStyles","makeStyles","theme","root","margin","spacing","width","Dict","classes","useState","meanings","setMeanings","word","setWord","lang","setLang","fetchData","a","axios","get","data","console","error","useEffect","className","Typography","variant","style","TextField","onChange","e","target","id","placeholder","select","map","language","index","MenuItem","meaning","wordMeanings","List","textAlign","partOfSpeech","definitions","wordDef","ListItem","ListItemText","definition","Divider","darkTheme","createTheme","palette","type","App","ThemeProvider","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAAaA,EAAY,CACvB,CAAEC,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,WAAYC,MAAO,MAC5B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,uBAAwBC,MAAO,SACxC,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,QAASC,MAAO,O,6ECFrBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,uBAAwB,CACtBC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,aAKAC,EAAiB,WAC5B,IAAMC,EAAUR,IAEhB,EAAgCS,mBAAuC,IAAvE,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAwB,IAAhD,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,mBAAwB,MAAhD,mBAAOK,EAAP,KAAaC,EAAb,KAEMC,EAAmB,uCAAG,4BAAAC,EAAA,+EAELC,IAAMC,IAAN,uDAC+BL,EAD/B,YACuCF,IAHlC,OAElBQ,EAFkB,OAQxBT,EAAYS,EAAKA,MARO,gDAWxBC,QAAQC,MAAR,MAXwB,yDAAH,qDAmBzB,OAJAC,qBAAU,WACRP,MACC,CAACJ,EAAME,IAGR,sBAAKU,UAAWhB,EAAQL,KAAxB,UACE,cAACsB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAAEvB,OAAQ,IAA1C,uBAGA,cAACwB,EAAA,EAAD,CACEC,SAAU,SAACC,GAAD,OAAOjB,EAAQiB,EAAEC,OAAOhC,QAClCiC,GAAG,OACHC,YAAY,gBACZP,QAAQ,aAEV,cAACE,EAAA,EAAD,CACEI,GAAG,OACHE,QAAM,EACNpC,MAAM,WACN4B,QAAQ,WACRG,SAAU,SAACC,GAAD,OAAOf,EAAQe,EAAEC,OAAOhC,QALpC,SAOGF,EAAUsC,KAAI,SAACC,EAAUC,GAAX,OACb,cAACC,EAAA,EAAD,CAAsBvC,MAAOqC,EAASrC,MAAtC,SACGqC,EAAStC,OADGuC,QAKL,OAAb3B,GACCA,EAASyB,KAAI,SAACI,GAAD,OACX,qCACE,cAACd,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAAEvB,OAAQ,IAA1C,SACGmC,EAAQ3B,OAEV2B,EAAQ7B,SAASyB,KAAI,SAACK,EAA4BH,GAA7B,OACpB,eAACI,EAAA,EAAD,CAAMd,MAAO,CAAEe,UAAW,UAA1B,UACE,cAACjB,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACGc,EAAaG,eAEfH,EAAaI,YAAYT,KACxB,SAACU,EAAmBR,GAApB,OACE,qCACE,cAACS,EAAA,EAAD,CAAUnB,MAAO,CAAEe,UAAW,UAA9B,SACE,cAACK,EAAA,EAAD,UAAeF,EAAQG,cADsBX,GAG/C,cAACY,EAAA,EAAD,YAVmCZ,gB,iBClEnDa,EAAYC,YAAY,CAC5BC,QAAS,CACPC,KAAM,UAgBKC,MAZf,WACE,OACE,8BACE,cAACC,EAAA,EAAD,CAAerD,MAAOgD,EAAtB,SACE,cAACM,EAAA,EAAD,CAAWC,SAAS,KAAK9B,MAAO,CAAEe,UAAW,UAA7C,SACE,cAAC,EAAD,WChBVgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1423a44b.chunk.js","sourcesContent":["export const languages = [\n  { label: \"English\", value: \"en\" },\n  { label: \"Spanish\", value: \"es\" },\n  { label: \"French\", value: \"fr\" },\n  { label: \"Japanese\", value: \"ja\" },\n  { label: \"Russian\", value: \"ru\" },\n  { label: \"German\", value: \"de\" },\n  { label: \"Italian\", value: \"it\" },\n  { label: \"Korean\", value: \"ko\" },\n  { label: \"Brazilian Portuguese\", value: \"pt-BR\" },\n  { label: \"Arabic\", value: \"ar\" },\n  { label: \"Turkish\", value: \"tr\" },\n  { label: \"Hindi\", value: \"hi\" },\n];\n","import React, { useState, useEffect, useRef } from \"react\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { languages } from \"../Data/languages\";\nimport { makeStyles, createTheme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n  },\n}));\n\nexport const Dict: React.FC = () => {\n  const classes = useStyles();\n\n  const [meanings, setMeanings] = useState<AxiosResponse | any | Object>([]);\n  const [word, setWord] = useState<String | null>(\"\");\n  const [lang, setLang] = useState<String | null>(\"en\");\n\n  const fetchData: Function = async () => {\n    try {\n      const data = await axios.get(\n        `https://api.dictionaryapi.dev/api/v2/entries/${lang}/${word}`\n      );\n      // if (data.status === 404) {\n      // setMeanings(null);\n      // } else {\n      setMeanings(data.data);\n      // }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [word, lang]);\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h2\" style={{ margin: 12 }}>\n        Word Hunt\n      </Typography>\n      <TextField\n        onChange={(e) => setWord(e.target.value)}\n        id=\"word\"\n        placeholder=\"Type The Word\"\n        variant=\"outlined\"\n      />\n      <TextField\n        id=\"lang\"\n        select\n        label=\"Language\"\n        variant=\"outlined\"\n        onChange={(e) => setLang(e.target.value)}\n      >\n        {languages.map((language, index) => (\n          <MenuItem key={index} value={language.value}>\n            {language.label}\n          </MenuItem>\n        ))}\n      </TextField>\n      {meanings !== null &&\n        meanings.map((meaning: any | string) => (\n          <>\n            <Typography variant=\"h3\" style={{ margin: 16 }}>\n              {meaning.word}\n            </Typography>\n            {meaning.meanings.map((wordMeanings: any | Object, index: any) => (\n              <List style={{ textAlign: \"center\" }} key={index}>\n                <Typography variant=\"h4\">\n                  {wordMeanings.partOfSpeech}\n                </Typography>\n                {wordMeanings.definitions.map(\n                  (wordDef: any | [], index: any) => (\n                    <>\n                      <ListItem style={{ textAlign: \"center\" }} key={index}>\n                        <ListItemText>{wordDef.definition}</ListItemText>\n                      </ListItem>\n                      <Divider />\n                    </>\n                  )\n                )}\n              </List>\n            ))}\n          </>\n        ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport Container from \"@material-ui/core/Container\";\nimport { Dict } from \"./Components/Dict\";\nimport {\n  createTheme,\n  ThemeProvider,\n  ThemeProviderProps,\n} from \"@material-ui/core/styles\";\n\nconst darkTheme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nfunction App() {\n  return (\n    <div>\n      <ThemeProvider theme={darkTheme}>\n        <Container maxWidth=\"md\" style={{ textAlign: \"center\" }}>\n          <Dict />\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}